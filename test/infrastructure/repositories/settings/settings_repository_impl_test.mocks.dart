// Mocks generated by Mockito 5.3.2 from annotations
// in kweeksnews_app/test/infrastructure/repositories/settings/settings_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i2;

import 'package:flutter/material.dart' as _i6;
import 'package:kweeksnews_app/infrastructure/datasources/settings/locale_local_data_source.dart'
    as _i3;
import 'package:kweeksnews_app/infrastructure/datasources/settings/theme_local_data_source.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocale_0 extends _i1.SmartFake implements _i2.Locale {
  _FakeLocale_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocaleLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocaleLocalDataSource extends _i1.Mock
    implements _i3.LocaleLocalDataSource {
  MockLocaleLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Locale> getLocale() => (super.noSuchMethod(
        Invocation.method(
          #getLocale,
          [],
        ),
        returnValue: _i4.Future<_i2.Locale>.value(_FakeLocale_0(
          this,
          Invocation.method(
            #getLocale,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Locale>);
  @override
  _i4.Future<_i2.Locale> setLocale(String? languageCode) => (super.noSuchMethod(
        Invocation.method(
          #setLocale,
          [languageCode],
        ),
        returnValue: _i4.Future<_i2.Locale>.value(_FakeLocale_0(
          this,
          Invocation.method(
            #setLocale,
            [languageCode],
          ),
        )),
      ) as _i4.Future<_i2.Locale>);
}

/// A class which mocks [ThemeLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeLocalDataSource extends _i1.Mock
    implements _i5.ThemeLocalDataSource {
  MockThemeLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i6.ThemeMode> getTheme() => (super.noSuchMethod(
        Invocation.method(
          #getTheme,
          [],
        ),
        returnValue: _i4.Future<_i6.ThemeMode>.value(_i6.ThemeMode.system),
      ) as _i4.Future<_i6.ThemeMode>);
  @override
  _i4.Future<_i6.ThemeMode> setTheme(_i6.ThemeMode? mode) =>
      (super.noSuchMethod(
        Invocation.method(
          #setTheme,
          [mode],
        ),
        returnValue: _i4.Future<_i6.ThemeMode>.value(_i6.ThemeMode.system),
      ) as _i4.Future<_i6.ThemeMode>);
}
