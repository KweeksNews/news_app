// Mocks generated by Mockito 5.3.2 from annotations
// in kweeksnews_app/test/application/settings/get_locale_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i7;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter/material.dart' as _i6;
import 'package:kweeksnews_app/domain/error/failures.dart' as _i5;
import 'package:kweeksnews_app/domain/repositories/settings/settings_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SettingsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsRepository extends _i1.Mock
    implements _i3.SettingsRepository {
  MockSettingsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ThemeMode>> getTheme() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTheme,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.ThemeMode>>.value(
            _FakeEither_0<_i5.Failure, _i6.ThemeMode>(
          this,
          Invocation.method(
            #getTheme,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.ThemeMode>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ThemeMode>> setTheme(
          {required _i6.ThemeMode? mode}) =>
      (super.noSuchMethod(
        Invocation.method(
          #setTheme,
          [],
          {#mode: mode},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.ThemeMode>>.value(
            _FakeEither_0<_i5.Failure, _i6.ThemeMode>(
          this,
          Invocation.method(
            #setTheme,
            [],
            {#mode: mode},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.ThemeMode>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.Locale>> getLocale() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocale,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i7.Locale>>.value(
            _FakeEither_0<_i5.Failure, _i7.Locale>(
          this,
          Invocation.method(
            #getLocale,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.Locale>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.Locale>> setLocale(
          {required String? languageCode}) =>
      (super.noSuchMethod(
        Invocation.method(
          #setLocale,
          [],
          {#languageCode: languageCode},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i7.Locale>>.value(
            _FakeEither_0<_i5.Failure, _i7.Locale>(
          this,
          Invocation.method(
            #setLocale,
            [],
            {#languageCode: languageCode},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.Locale>>);
}
